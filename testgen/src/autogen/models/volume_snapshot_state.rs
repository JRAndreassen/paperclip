#![allow(clippy::too_many_arguments, clippy::new_without_default, non_camel_case_types, unused_imports)]
/*
 * IoEngine RESTful API
 *
 * The version of the OpenAPI document: v0
 *
 * Generated by: https://github.com/openebs/openapi-generator
 */

use crate::apis::{IntoOptVec, IntoVec};




/// VolumeSnapshotState : Volume Snapshot State information.









/// Volume Snapshot State information.
#[derive(Clone, Debug, Default, Eq, PartialEq, Serialize, Deserialize)]
pub struct VolumeSnapshotState {

    
    #[serde(rename = "uuid")]
    pub uuid: uuid::Uuid,

    
    /// Size in bytes of the snapshot (which is equivalent to its source size).
    #[serde(rename = "size")]
    pub size: u64,

    
    #[serde(rename = "source_volume")]
    pub source_volume: uuid::Uuid,

    
    /// Timestamp when snapshot is taken on the storage system.
    #[serde(rename = "creation_timestamp")]
    pub creation_timestamp: String,

    
    /// Indicates if a snapshot is ready to be used as a clone.
    #[serde(rename = "clone_ready", skip_serializing_if = "Option::is_none")]
    pub clone_ready: Option<bool>,

    
    /// List of individual ReplicaSnapshotStates.
    #[serde(rename = "replica_snapshots")]
    pub replica_snapshots: Vec<crate::models::ReplicaSnapshotState>,

}

impl VolumeSnapshotState {
    /// VolumeSnapshotState using only the required fields
    pub fn new(uuid: impl Into<uuid::Uuid>, size: impl Into<u64>, source_volume: impl Into<uuid::Uuid>, creation_timestamp: impl Into<String>, replica_snapshots: impl IntoVec<crate::models::ReplicaSnapshotState>) -> VolumeSnapshotState {
        VolumeSnapshotState {
            
            uuid: uuid.into(),
            
            size: size.into(),
            
            source_volume: source_volume.into(),
            
            creation_timestamp: creation_timestamp.into(),
            
            clone_ready: None,
            
            replica_snapshots: replica_snapshots.into_vec(),
            
        }
    }
    /// VolumeSnapshotState using all fields
    pub fn new_all(uuid: impl Into<uuid::Uuid>, size: impl Into<u64>, source_volume: impl Into<uuid::Uuid>, creation_timestamp: impl Into<String>, clone_ready: impl Into<Option<bool>>, replica_snapshots: impl IntoVec<crate::models::ReplicaSnapshotState>) -> VolumeSnapshotState {
        VolumeSnapshotState {
            
            uuid: uuid.into(),
            
            size: size.into(),
            
            source_volume: source_volume.into(),
            
            creation_timestamp: creation_timestamp.into(),
            
            clone_ready: clone_ready.into(),
            
            replica_snapshots: replica_snapshots.into_vec(),
            
        }
    }
}




















