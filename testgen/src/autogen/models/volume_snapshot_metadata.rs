#![allow(clippy::too_many_arguments, clippy::new_without_default, non_camel_case_types, unused_imports)]
/*
 * IoEngine RESTful API
 *
 * The version of the OpenAPI document: v0
 *
 * Generated by: https://github.com/openebs/openapi-generator
 */

use crate::apis::{IntoOptVec, IntoVec};




/// VolumeSnapshotMetadata : Volume Snapshot Metadata information.









/// Volume Snapshot Metadata information.
#[derive(Clone, Debug, Default, Eq, PartialEq, Serialize, Deserialize)]
pub struct VolumeSnapshotMetadata {

    
    /// Timestamp when snapshot is taken on the storage system.
    #[serde(rename = "creation_timestamp", skip_serializing_if = "Option::is_none")]
    pub creation_timestamp: Option<String>,

    
    #[serde(rename = "txn_id")]
    pub txn_id: String,

    
    #[serde(rename = "transactions")]
    pub transactions: ::std::collections::HashMap<String, Vec<crate::models::ReplicaSnapshot>>,

}

impl VolumeSnapshotMetadata {
    /// VolumeSnapshotMetadata using only the required fields
    pub fn new(txn_id: impl Into<String>, transactions: impl Into<::std::collections::HashMap<String, Vec<crate::models::ReplicaSnapshot>>>) -> VolumeSnapshotMetadata {
        VolumeSnapshotMetadata {
            
            creation_timestamp: None,
            
            txn_id: txn_id.into(),
            
            transactions: transactions.into(),
            
        }
    }
    /// VolumeSnapshotMetadata using all fields
    pub fn new_all(creation_timestamp: impl Into<Option<String>>, txn_id: impl Into<String>, transactions: impl Into<::std::collections::HashMap<String, Vec<crate::models::ReplicaSnapshot>>>) -> VolumeSnapshotMetadata {
        VolumeSnapshotMetadata {
            
            creation_timestamp: creation_timestamp.into(),
            
            txn_id: txn_id.into(),
            
            transactions: transactions.into(),
            
        }
    }
}














