#![allow(clippy::too_many_arguments, clippy::new_without_default, non_camel_case_types, unused_imports)]
/*
 * IoEngine RESTful API
 *
 * The version of the OpenAPI document: v0
 *
 * Generated by: https://github.com/openebs/openapi-generator
 */

use crate::apis::{IntoOptVec, IntoVec};




/// VolumeUsage : Volume space usage









/// Volume space usage
#[derive(Clone, Debug, Default, Eq, PartialEq, Serialize, Deserialize)]
pub struct VolumeUsage {

    
    /// Capacity of the volume in bytes.
    #[serde(rename = "capacity")]
    pub capacity: u64,

    
    /// -| Allocated size in bytes, related to a single healthy replica. For example, if a volume has 2 replicas, each with 1MiB allocated space, then this field will be 1MiB.
    #[serde(rename = "allocated")]
    pub allocated: u64,

    
    /// -| Allocated size in bytes, accrued from all the replica. For example, if a volume has 2 replicas, each with 1MiB allocated space, then this field will be 2MiB.
    #[serde(rename = "total_allocated")]
    pub total_allocated: u64,

}

impl VolumeUsage {
    /// VolumeUsage using only the required fields
    pub fn new(capacity: impl Into<u64>, allocated: impl Into<u64>, total_allocated: impl Into<u64>) -> VolumeUsage {
        VolumeUsage {
            
            capacity: capacity.into(),
            
            allocated: allocated.into(),
            
            total_allocated: total_allocated.into(),
            
        }
    }
    /// VolumeUsage using all fields
    pub fn new_all(capacity: impl Into<u64>, allocated: impl Into<u64>, total_allocated: impl Into<u64>) -> VolumeUsage {
        VolumeUsage {
            
            capacity: capacity.into(),
            
            allocated: allocated.into(),
            
            total_allocated: total_allocated.into(),
            
        }
    }
}














